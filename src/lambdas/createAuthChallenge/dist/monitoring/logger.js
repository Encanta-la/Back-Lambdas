"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = void 0;
const createLogObject = (level, message, data = {}, error = null) => {
    const now = new Date();
    const utcTimestamp = now.toISOString();
    const brasiliaTimestamp = now.toLocaleString('pt-BR', {
        timeZone: 'America/Sao_Paulo',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
    });
    return {
        level,
        timestamp: {
            utc: utcTimestamp,
            brasilia: brasiliaTimestamp,
        },
        message,
        ...(error && {
            errorName: error.name,
            errorMessage: error.message,
            stackTrace: error.stack,
        }),
        data,
        requestId: process.env.AWS_LAMBDA_REQUEST_ID,
        functionName: process.env.AWS_LAMBDA_FUNCTION_NAME,
        functionVersion: process.env.AWS_LAMBDA_FUNCTION_VERSION,
        environment: process.env.ENVIRONMENT || 'production',
    };
};
exports.logger = {
    info: (message, data = {}) => {
        console.log(JSON.stringify(createLogObject('INFO', message, data)));
    },
    error: (message, error, data = {}) => {
        console.error(JSON.stringify(createLogObject('ERROR', message, data, error)));
    },
    warn: (message, data = {}) => {
        console.warn(JSON.stringify(createLogObject('WARN', message, data)));
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vbml0b3JpbmcvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQXVCQSxNQUFNLGVBQWUsR0FBRyxDQUN0QixLQUFhLEVBQ2IsT0FBZSxFQUNmLE9BQWdCLEVBQUUsRUFDbEIsUUFBc0IsSUFBSSxFQUNmLEVBQUU7SUFDYixNQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO0lBRXZCLE1BQU0sWUFBWSxHQUFHLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN2QyxNQUFNLGlCQUFpQixHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFO1FBQ3BELFFBQVEsRUFBRSxtQkFBbUI7UUFDN0IsSUFBSSxFQUFFLFNBQVM7UUFDZixLQUFLLEVBQUUsU0FBUztRQUNoQixHQUFHLEVBQUUsU0FBUztRQUNkLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLFNBQVM7UUFDakIsTUFBTSxFQUFFLFNBQVM7S0FDbEIsQ0FBQyxDQUFDO0lBRUgsT0FBTztRQUNMLEtBQUs7UUFDTCxTQUFTLEVBQUU7WUFDVCxHQUFHLEVBQUUsWUFBWTtZQUNqQixRQUFRLEVBQUUsaUJBQWlCO1NBQzVCO1FBQ0QsT0FBTztRQUNQLEdBQUcsQ0FBQyxLQUFLLElBQUk7WUFDWCxTQUFTLEVBQUUsS0FBSyxDQUFDLElBQUk7WUFDckIsWUFBWSxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQzNCLFVBQVUsRUFBRSxLQUFLLENBQUMsS0FBSztTQUN4QixDQUFDO1FBQ0YsSUFBSTtRQUNKLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQjtRQUM1QyxZQUFZLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0I7UUFDbEQsZUFBZSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCO1FBQ3hELFdBQVcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSSxZQUFZO0tBQ3JELENBQUM7QUFDSixDQUFDLENBQUM7QUFFVyxRQUFBLE1BQU0sR0FBRztJQUNwQixJQUFJLEVBQUUsQ0FBQyxPQUFlLEVBQUUsT0FBZ0IsRUFBRSxFQUFRLEVBQUU7UUFDbEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBQ0QsS0FBSyxFQUFFLENBQUMsT0FBZSxFQUFFLEtBQVksRUFBRSxPQUFnQixFQUFFLEVBQVEsRUFBRTtRQUNqRSxPQUFPLENBQUMsS0FBSyxDQUNYLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQy9ELENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBSSxFQUFFLENBQUMsT0FBZSxFQUFFLE9BQWdCLEVBQUUsRUFBUSxFQUFFO1FBQ2xELE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkUsQ0FBQztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbnRlcmZhY2UgVGltZXN0YW1wRm9ybWF0IHtcbiAgdXRjOiBzdHJpbmc7XG4gIGJyYXNpbGlhOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBMb2dEYXRhIHtcbiAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG5pbnRlcmZhY2UgTG9nT2JqZWN0IHtcbiAgbGV2ZWw6IHN0cmluZztcbiAgdGltZXN0YW1wOiBUaW1lc3RhbXBGb3JtYXQ7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgZXJyb3JOYW1lPzogc3RyaW5nO1xuICBlcnJvck1lc3NhZ2U/OiBzdHJpbmc7XG4gIHN0YWNrVHJhY2U/OiBzdHJpbmc7XG4gIGRhdGE6IExvZ0RhdGE7XG4gIHJlcXVlc3RJZDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBmdW5jdGlvbk5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgZnVuY3Rpb25WZXJzaW9uOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIGVudmlyb25tZW50OiBzdHJpbmc7XG59XG5cbmNvbnN0IGNyZWF0ZUxvZ09iamVjdCA9IChcbiAgbGV2ZWw6IHN0cmluZyxcbiAgbWVzc2FnZTogc3RyaW5nLFxuICBkYXRhOiBMb2dEYXRhID0ge30sXG4gIGVycm9yOiBFcnJvciB8IG51bGwgPSBudWxsXG4pOiBMb2dPYmplY3QgPT4ge1xuICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuXG4gIGNvbnN0IHV0Y1RpbWVzdGFtcCA9IG5vdy50b0lTT1N0cmluZygpO1xuICBjb25zdCBicmFzaWxpYVRpbWVzdGFtcCA9IG5vdy50b0xvY2FsZVN0cmluZygncHQtQlInLCB7XG4gICAgdGltZVpvbmU6ICdBbWVyaWNhL1Nhb19QYXVsbycsXG4gICAgeWVhcjogJ251bWVyaWMnLFxuICAgIG1vbnRoOiAnMi1kaWdpdCcsXG4gICAgZGF5OiAnMi1kaWdpdCcsXG4gICAgaG91cjogJzItZGlnaXQnLFxuICAgIG1pbnV0ZTogJzItZGlnaXQnLFxuICAgIHNlY29uZDogJzItZGlnaXQnLFxuICB9KTtcblxuICByZXR1cm4ge1xuICAgIGxldmVsLFxuICAgIHRpbWVzdGFtcDoge1xuICAgICAgdXRjOiB1dGNUaW1lc3RhbXAsXG4gICAgICBicmFzaWxpYTogYnJhc2lsaWFUaW1lc3RhbXAsXG4gICAgfSxcbiAgICBtZXNzYWdlLFxuICAgIC4uLihlcnJvciAmJiB7XG4gICAgICBlcnJvck5hbWU6IGVycm9yLm5hbWUsXG4gICAgICBlcnJvck1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICBzdGFja1RyYWNlOiBlcnJvci5zdGFjayxcbiAgICB9KSxcbiAgICBkYXRhLFxuICAgIHJlcXVlc3RJZDogcHJvY2Vzcy5lbnYuQVdTX0xBTUJEQV9SRVFVRVNUX0lELFxuICAgIGZ1bmN0aW9uTmFtZTogcHJvY2Vzcy5lbnYuQVdTX0xBTUJEQV9GVU5DVElPTl9OQU1FLFxuICAgIGZ1bmN0aW9uVmVyc2lvbjogcHJvY2Vzcy5lbnYuQVdTX0xBTUJEQV9GVU5DVElPTl9WRVJTSU9OLFxuICAgIGVudmlyb25tZW50OiBwcm9jZXNzLmVudi5FTlZJUk9OTUVOVCB8fCAncHJvZHVjdGlvbicsXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgbG9nZ2VyID0ge1xuICBpbmZvOiAobWVzc2FnZTogc3RyaW5nLCBkYXRhOiBMb2dEYXRhID0ge30pOiB2b2lkID0+IHtcbiAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShjcmVhdGVMb2dPYmplY3QoJ0lORk8nLCBtZXNzYWdlLCBkYXRhKSkpO1xuICB9LFxuICBlcnJvcjogKG1lc3NhZ2U6IHN0cmluZywgZXJyb3I6IEVycm9yLCBkYXRhOiBMb2dEYXRhID0ge30pOiB2b2lkID0+IHtcbiAgICBjb25zb2xlLmVycm9yKFxuICAgICAgSlNPTi5zdHJpbmdpZnkoY3JlYXRlTG9nT2JqZWN0KCdFUlJPUicsIG1lc3NhZ2UsIGRhdGEsIGVycm9yKSlcbiAgICApO1xuICB9LFxuICB3YXJuOiAobWVzc2FnZTogc3RyaW5nLCBkYXRhOiBMb2dEYXRhID0ge30pOiB2b2lkID0+IHtcbiAgICBjb25zb2xlLndhcm4oSlNPTi5zdHJpbmdpZnkoY3JlYXRlTG9nT2JqZWN0KCdXQVJOJywgbWVzc2FnZSwgZGF0YSkpKTtcbiAgfSxcbn07XG4iXX0=