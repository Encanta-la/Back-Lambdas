name: Lambda Build and Push

on:
  # Roda quando há push direto nas branches principais
  push:
    branches: ['main', 'staging', 'develop']
  # Roda quando PR é fechado (merged) para as branches principais
  pull_request:
    types: [closed]
    branches: ['main', 'staging', 'develop']

permissions:
  id-token: write
  contents: write
  deployments: write
  statuses: write

env:
  NODE_VERSION: '20'
  DOCKER_BUILDKIT: '1'

jobs:
  build-and-push:
    # Roda se for um push direto OU se for um PR merged
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest

    # Define o ambiente baseado no contexto (push ou PR)
    environment: >-
      ${{  
        (github.event_name == 'push' && github.ref_name == 'main') && 'production' ||  
        (github.event_name == 'push' && github.ref_name == 'staging') && 'staging' ||  
        (github.event_name == 'push' && github.ref_name == 'develop') && 'development' ||  
        (github.event_name == 'pull_request' && github.base_ref == 'main') && 'production' ||  
        (github.event_name == 'pull_request' && github.base_ref == 'staging') && 'staging' ||  
        'development'  
      }}

    strategy:
      matrix:
        lambda:
          [
            'createAuthChallenge',
            'defineAuthChallenge',
            'executeRegistration',
            'preRegister',
            'verifyAuthChallenge',
          ]

    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      ECR_REPOSITORY_PREFIX: ${{ vars.ECR_REPOSITORY_PREFIX }}
      ENVIRONMENT: >-
        ${{  
          (github.event_name == 'push' && github.ref_name == 'main') && 'prod' ||  
          (github.event_name == 'push' && github.ref_name == 'staging') && 'staging' ||  
          (github.event_name == 'push' && github.ref_name == 'develop') && 'dev' ||  
          (github.event_name == 'pull_request' && github.base_ref == 'main') && 'prod' ||  
          (github.event_name == 'pull_request' && github.base_ref == 'staging') && 'staging' ||  
          'dev'  
        }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create deployment
        id: deployment
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ github.token }}
          environment: ${{ env.ENVIRONMENT }}
          initial-status: 'in_progress'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Install root dependencies
        run: npm ci

      - name: Install lambda dependencies
        run: |
          cd src/lambdas/${{ matrix.lambda }}  
          npm ci

      - name: Run lambda tests
        run: |
          cd src/lambdas/${{ matrix.lambda }}  
          npm test

      - name: Check and update version
        id: version
        run: |
          cd src/lambdas/${{ matrix.lambda }}  
          CURRENT_VERSION=$(node -p "require('./package.json').version")  
          echo "Current version: ${CURRENT_VERSION}"  

          if [ "${{ github.event_name }}" = "pull_request" ]; then  
            CHANGES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- src/lambdas/${{ matrix.lambda }})  
          else  
            # Para pushes, compare com o commit anterior  
            CHANGES=$(git diff --name-only HEAD~1 HEAD -- src/lambdas/${{ matrix.lambda }})  
          fi  

          # Debug  
          echo "Changes detected in files: $CHANGES"  

          # Sempre atualiza a versão se houver mudanças, senão mantém a atual  
          if [ ! -z "$CHANGES" ]; then  
            npm version patch --no-git-tag-version  
            NEW_VERSION=$(node -p "require('./package.json').version")  
            echo "Changes found, bumping version to ${NEW_VERSION}"  
            echo "version=${NEW_VERSION}" >> "$GITHUB_OUTPUT"  
          else  
            echo "No changes found, keeping version ${CURRENT_VERSION}"  
            echo "version=${CURRENT_VERSION}" >> "$GITHUB_OUTPUT"  
          fi

      - name: Debug version info
        run: |
          echo "Lambda: ${{ matrix.lambda }}"  
          echo "Version to be used: ${{ steps.version.outputs.version }}"

      - name: Build and push Docker image
        id: build_and_push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          VERSION: ${{ steps.version.outputs.version }}
          LAMBDA_NAME: ${{ matrix.lambda }}
        run: |
          LAMBDA_LOWERCASE=$(echo "$LAMBDA_NAME" | tr '[:upper:]' '[:lower:]')  
          REPO_NAME="${ECR_REPOSITORY_PREFIX}${LAMBDA_LOWERCASE}"  
          REPO_URI=${ECR_REGISTRY}/${REPO_NAME}  
          GIT_SHA=$(git rev-parse --short HEAD)  

          echo "Building Docker image for $LAMBDA_NAME version ${VERSION}"  
          docker build -t ${LAMBDA_LOWERCASE}:latest src/lambdas/${LAMBDA_NAME}  

          echo "Tagging image with version ${VERSION}"  
          docker tag ${LAMBDA_LOWERCASE}:latest ${REPO_URI}:latest  
          docker tag ${LAMBDA_LOWERCASE}:latest ${REPO_URI}:v${VERSION}  
          docker tag ${LAMBDA_LOWERCASE}:latest ${REPO_URI}:sha-${GIT_SHA}  

          echo "Pushing images to ECR"  
          docker push ${REPO_URI}:latest  
          docker push ${REPO_URI}:v${VERSION}  
          docker push ${REPO_URI}:sha-${GIT_SHA}

      - name: Create backup
        if: steps.version.outputs.version_updated == 'true'
        run: |
          mkdir -p backup/lambda-tags  
          aws ecr batch-get-image \
            --repository-name ${{ env.ECR_REPOSITORY_PREFIX }}${{ matrix.lambda }} \
            --image-ids imageTag=v${{ steps.version.outputs.version }} \
            | jq -r '.images[].imageManifest' > backup/lambda-tags/backup-$(date +%Y-%m-%d).json

      - name: Commit version changes
        if: steps.version.outputs.version_updated == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"  
          git config --local user.name "github-actions[bot]"  
          git add src/lambdas/${{ matrix.lambda }}/package.json  
          git commit -m "chore(lambda): bump ${{ matrix.lambda }} version to ${{ steps.version.outputs.version }}"  
          git push

      - name: Update deployment status
        if: steps.build_and_push.outcome != 'skipped'
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ github.token }}
          state: ${{ job.status == 'success' && 'success' || 'failure' }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
