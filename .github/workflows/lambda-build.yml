name: Lambda Build and Push

on:
  push:
    branches: ['main', 'staging', 'develop']
  pull_request:
    types: [closed]
    branches: ['main', 'staging', 'develop']

permissions:
  id-token: write
  contents: write
  deployments: write
  statuses: write

env:
  NODE_VERSION: '20'
  DOCKER_BUILDKIT: '1'
  ECR_REPOSITORY_PREFIX: ${{ vars.ECR_REPOSITORY_PREFIX }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lambda:
          [
            'createAuthChallenge',
            'defineAuthChallenge',
            'executeRegistration',
            'preRegister',
            'verifyAuthChallenge',
          ]
      fail-fast: false

    env:
      AWS_REGION: ${{ secrets[format('{0}_AWS_REGION', github.ref_name == 'main' && 'PROD' || github.ref_name == 'staging' && 'STAGE' || 'DEV')] }}
      AWS_ACCOUNT_ID: ${{ secrets[format('{0}_AWS_ACCOUNT_ID', github.ref_name == 'main' && 'PROD' || github.ref_name == 'staging' && 'STAGE' || 'DEV')] }}
      ENVIRONMENT: ${{ github.ref_name }}-${{ matrix.lambda }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets[format('{0}_AWS_ROLE_ARN', github.ref_name == 'main' && 'PROD' || github.ref_name == 'staging' && 'STAGE' || 'DEV')] }}
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Install root dependencies
        run: npm ci

      - name: Install lambda dependencies
        run: |
          cd src/lambdas/${{ matrix.lambda }}  
          npm ci

      - name: Run lambda tests
        run: |
          cd src/lambdas/${{ matrix.lambda }}  
          npm test

      - name: Create deployment
        id: deployment
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ github.token }}
          environment: ${{ github.ref_name }}-${{ matrix.lambda }}
          initial-status: 'in_progress'

      - name: Get current version
        id: version
        run: |
          cd src/lambdas/${{ matrix.lambda }}  
          CURRENT_VERSION=$(node -p "require('./package.json').version")  
          echo "Current version: ${CURRENT_VERSION}"  
          echo "version=${CURRENT_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Build and push Docker image
        id: build_and_push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          VERSION: ${{ steps.version.outputs.version }}
          LAMBDA_NAME: ${{ matrix.lambda }}
        run: |
          LAMBDA_LOWERCASE=$(echo "$LAMBDA_NAME" | tr '[:upper:]' '[:lower:]')  
          REPO_NAME="${ECR_REPOSITORY_PREFIX}${LAMBDA_LOWERCASE}"  
          REPO_URI=${ECR_REGISTRY}/${REPO_NAME}  
          GIT_SHA=$(git rev-parse --short HEAD)  

          echo "Building Docker image for $LAMBDA_NAME version ${VERSION}"  
          docker build -t ${LAMBDA_LOWERCASE}:latest src/lambdas/${LAMBDA_NAME}  

          echo "Tagging image with version ${VERSION}"  
          docker tag ${LAMBDA_LOWERCASE}:latest ${REPO_URI}:latest  
          docker tag ${LAMBDA_LOWERCASE}:latest ${REPO_URI}:v${VERSION}  
          docker tag ${LAMBDA_LOWERCASE}:latest ${REPO_URI}:sha-${GIT_SHA}  

          echo "Pushing images to ECR"  
          docker push ${REPO_URI}:latest  
          docker push ${REPO_URI}:v${VERSION}  
          docker push ${REPO_URI}:sha-${GIT_SHA}

      - name: Update deployment status
        if: ${{ steps.build_and_push.outcome == 'success' }}
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ github.token }}
          state: success
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Update deployment status on failure
        if: ${{ steps.build_and_push.outcome != 'success' }}
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ github.token }}
          state: failure
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
