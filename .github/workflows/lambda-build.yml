name: Lambda Build and Push

on:
  push:
    branches: ['main', 'staging', 'develop']
  pull_request:
    types: [closed]
    branches: ['main', 'staging', 'develop']

permissions:
  id-token: write
  contents: write
  deployments: write
  statuses: write

env:
  NODE_VERSION: '20'
  DOCKER_BUILDKIT: '1'
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  ECR_REPOSITORY_PREFIX: ${{ vars.ECR_REPOSITORY_PREFIX }}

jobs:
  create-deployment:
    if: (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)) && github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    environment: >-
      ${{  
        (github.event_name == 'push' && github.ref_name == 'main') && 'production' ||  
        (github.event_name == 'push' && github.ref_name == 'staging') && 'staging' ||  
        (github.event_name == 'push' && github.ref_name == 'develop') && 'development' ||  
        (github.event_name == 'pull_request' && github.base_ref == 'main') && 'production' ||  
        (github.event_name == 'pull_request' && github.base_ref == 'staging') && 'staging' ||  
        'development'  
      }}
    outputs:
      deployment_id: ${{ steps.deployment.outputs.deployment_id }}
      environment: ${{ steps.set_env.outputs.environment }}
      aws_region: ${{ env.AWS_REGION }}
      aws_account_id: ${{ env.AWS_ACCOUNT_ID }}
      ecr_repository_prefix: ${{ env.ECR_REPOSITORY_PREFIX }}
    steps:
      - name: Set environment
        id: set_env
        run: |
          ENV_NAME=${{  
            (github.event_name == 'push' && github.ref_name == 'main') && 'production' ||  
            (github.event_name == 'push' && github.ref_name == 'staging') && 'staging' ||  
            (github.event_name == 'push' && github.ref_name == 'develop') && 'development' ||  
            (github.event_name == 'pull_request' && github.base_ref == 'main') && 'production' ||  
            (github.event_name == 'pull_request' && github.base_ref == 'staging') && 'staging' ||  
            'development'  
          }}  
          echo "environment=$ENV_NAME" >> $GITHUB_OUTPUT

      - name: Create deployment
        id: deployment
        if: github.actor != 'github-actions[bot]'
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ github.token }}
          environment: ${{ steps.set_env.outputs.environment }}
          initial-status: 'in_progress'

  build-and-push:
    needs: create-deployment
    runs-on: ubuntu-latest
    environment: ${{ needs.create-deployment.outputs.environment }}
    strategy:
      matrix:
        lambda:
          [
            'createAuthChallenge',
            'defineAuthChallenge',
            'executeRegistration',
            'preRegister',
            'verifyAuthChallenge',
          ]
      fail-fast: false

    env:
      AWS_REGION: ${{ needs.create-deployment.outputs.aws_region }}
      AWS_ACCOUNT_ID: ${{ needs.create-deployment.outputs.aws_account_id }}
      ECR_REPOSITORY_PREFIX: ${{ needs.create-deployment.outputs.ecr_repository_prefix }}
      ENVIRONMENT: ${{ needs.create-deployment.outputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Install root dependencies
        run: npm ci

      - name: Install lambda dependencies
        run: |
          cd src/lambdas/${{ matrix.lambda }}  
          npm ci

      - name: Run lambda tests
        run: |
          cd src/lambdas/${{ matrix.lambda }}  
          npm test

      - name: Build and push Docker image
        id: build_and_push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          LAMBDA_NAME: ${{ matrix.lambda }}
        run: |
          VERSION=$(node -p "require('./package.json').version")  
          LAMBDA_LOWERCASE=$(echo "$LAMBDA_NAME" | tr '[:upper:]' '[:lower:]')  
          REPO_NAME="${ECR_REPOSITORY_PREFIX}${LAMBDA_LOWERCASE}"  
          REPO_URI=${ECR_REGISTRY}/${REPO_NAME}  
          GIT_SHA=$(git rev-parse --short HEAD)  

          echo "Building Docker image for $LAMBDA_NAME version ${VERSION}"  
          docker build -t ${LAMBDA_LOWERCASE}:latest src/lambdas/${LAMBDA_NAME}  

          echo "Tagging image with version ${VERSION}"  
          docker tag ${LAMBDA_LOWERCASE}:latest ${REPO_URI}:latest  
          docker tag ${LAMBDA_LOWERCASE}:latest ${REPO_URI}:v${VERSION}  
          docker tag ${LAMBDA_LOWERCASE}:latest ${REPO_URI}:sha-${GIT_SHA}  

          echo "Pushing images to ECR"  
          docker push ${REPO_URI}:latest  
          docker push ${REPO_URI}:v${VERSION}  
          docker push ${REPO_URI}:sha-${GIT_SHA}

  update-deployment:
    needs: [create-deployment, build-and-push]
    runs-on: ubuntu-latest
    if: always() && needs.create-deployment.result != 'skipped'
    steps:
      - name: Update deployment status
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ github.token }}
          state: ${{ needs.build-and-push.result == 'success' && 'success' || 'failure' }}
          deployment-id: ${{ needs.create-deployment.outputs.deployment_id }}
